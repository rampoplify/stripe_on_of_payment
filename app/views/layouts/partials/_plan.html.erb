  <div class="row">
    <%if @prices.present? %>
      <% @prices.each do |price|%>
        <div class="col-sm-4 col-md-4 col-xs-12 col-lg-4" style="<% if @current_plan.present? && price.id == @current_plan.id%>opacity: 0.3; pointer-events: none; <% end %>" >
          <label for="card" class="method_card">
            <% if price.recurring.interval == 'month' && price.recurring.interval_count == 1 %>
              <% charge = 'Monthly'%>
            <% elsif price.recurring.interval == 'month' && price.recurring.interval_count == 6 %>
              <% charge =  'Per 6 Month'%> 
            <% else %>
              <% charge =  'Per year'%> 
            <% end %>

            <div class="radio-input">
              <input id="<%= price.id%>" type="radio" name="subscription" class="radio_buttons" value="<%= price.id%>">
              <ul>
                <li>
                  Amount : $ <%= price.unit_amount / 100 %> / <%= charge %>
                </li>
                <li>
                  Charged <%= charge%> 
               </li>
               <li>
                  Non-refundable
               </li>
             </ul>
            </div>
          </label>
        </div>
      <% end %>
    <% end %>
  </div>

<script type="text/javascript">

function createPaymentMethod({ isPaymentRetry, invoiceId, cardElement }) {
  let billingName = $('#full_name').val()
  stripe.createPaymentMethod({
    type: 'card',
    card: cardElement,
    billing_details: {
      name: billingName,
    },
  })
    .then((result) => {
      if (result.error) {
        displayError(result);
      } else {
        if (isPaymentRetry) {
          retryInvoiceWithNewPaymentMethod({
            paymentMethodId: result.paymentMethod.id,
            invoiceId: invoiceId,
            priceId: $("input[name='subscription']:checked").val(),
          });
        } else {
          createSubscription({
            paymentMethodId: result.paymentMethod.id
          });
        }
      }
    });
}
function displayError(event) {
  let displayError = document.getElementById('card-element-errors');
  if (event.error) {
    displayError.style.textAlign = 'center'
    displayError.style.color = 'red'
    displayError.textContent = event.error.message;
  } else {
    displayError.textContent = '';
  }
}

function createSubscription({paymentMethodId, priceId }) {
  return (
    $.ajax({
      url: '/subscriptions/create_subscription',
      method: 'post',
      data: {
        payment_method: paymentMethodId,
        price_id: $("input[name='subscription']:checked").val()
      }
    })
  .then((response) => {
    return response;
  })
  .then((result) => {
    if (result.error) {
      throw result;
    }
    return result;
  })
  .then((result) => {
    return {subscription: result.subscription, paymentMethodId: result.payment_intent.payment_method, paymentIntent: result.payment_intent};
  })
  .then(handlePaymentThatRequiresCustomerAction)
  .then(handleRequiresPaymentMethod)
  .then(onSubscriptionComplete)
  .catch((error) => {
    displayError(error);
  })
)}

function handlePaymentThatRequiresCustomerAction({subscription, paymentIntent, isRetry, invoice, priceId, paymentMethodId}) {
  if (subscription && subscription.status === 'active') {
    return { subscription, priceId, paymentMethodId };
  }
  if ((paymentIntent && paymentIntent.status === 'requires_action') || (isRetry === true && paymentIntent.status ==='requires_payment_method') ) {
    $('.submit_btn').prop('disable', true);
    return stripe
    .confirmCardPayment(paymentIntent.client_secret, {
      payment_method: paymentMethodId,
    })
    .then((result) => {
      if (result.error) {
        return {
          subscription, 
          paymentMethodId: result.error.payment_method.id, 
          priceId: $("input[name='subscription']:checked").val(), 
          paymentIntent: result.error.payment_intent
        }
      } else {
        if (result.paymentIntent.status === 'succeeded') {
          return {
            subscription: subscription,
            priceId: $("input[name='subscription']:checked").val(),
            paymentMethodId: paymentMethodId,
          };
        }
      }
    });
  } 
  else {
    return { subscription, priceId, paymentMethodId };
  }
}


function retryInvoiceWithNewPaymentMethod({ paymentMethodId, invoiceId, priceId, }) {
  return (
    $.ajax({
      method: 'post',
      url: '/subscriptions/retry_invoice',
      data: {
        payment_method: paymentMethodId,
        invoice_id: invoiceId
      }
    })
    .then((response) => {
      return response;
    })
    .then((result) => {
      if (result.error) {
        throw result;
      }
      return result;
    })
    .then((result) => {
      return {
        invoice: result.invoice,
        subscription: result.invoice.subscription,
        paymentIntent: result.invoice.payment_intent,
        paymentMethodId: paymentMethodId,
        priceId: priceId,
        isRetry: true,
      };
    })
    .then(handlePaymentThatRequiresCustomerAction)
    .then(handleRequiresPaymentMethod)
    .then(onSubscriptionComplete)
    .catch((error) => {
      displayError(error);
    })
  );
}

function handleRequiresPaymentMethod({ subscription, paymentMethodId, priceId, paymentIntent }) {
  if (subscription && subscription.status === 'active') {
    return { subscription, priceId, paymentMethodId };
  } else if ( paymentIntent && paymentIntent.status ==='requires_payment_method' ) {
    if (typeof subscription.latest_invoice === 'string'){
      localStorage.setItem('latestInvoiceId', subscription.latest_invoice);
    }
    else{
      localStorage.setItem('latestInvoiceId', subscription.latest_invoice.id);
    }
    localStorage.setItem('latestInvoicePaymentIntentStatus', paymentIntent.status );
    throw { error: { message: 'Your card was declined.' } };
  } else {
    return { subscription, priceId, paymentMethodId };
  }
}

function clearCache() {
  localStorage.clear();
}
</script>